pipeline {
    agent {
        label 'remote-server-agent'
    }

    triggers {
        GenericTrigger(
            genericVariables: [
                [key: 'ref', value: '$.ref'],
                [key: 'commit', value: '$.after'],
                [key: 'author', value: '$.commits[0].author.name']
            ],
            causeString: 'Triggered by commit on $ref by $author',
            token: 'dwinzoBetaOrgDwinzoDev',
            printContributedVariables: true,
            printPostContent: true,
            regexpFilterText: '$ref',
            regexpFilterExpression: '^refs/heads/main$'
        )
    }

    environment {
        GIT_CREDENTIALS = credentials('ramkumarp')
        DOCKER_COMPOSE = 'docker-compose'
        APP_NAME = 'Dwinzo-Beta/Dwinzo_dev'
        MAIN_CONTAINER = 'dwinzo-beta'
        SONAR_HOST_URL = 'http://185.100.212.76:12345'
        SONAR_TOKEN = credentials('sonarqube-token')
        SMTP_CREDENTIALS = credentials('smtp-credentials-gmail')
    }

    stages {
        stage('Source') {
            steps {
                script {
                    cleanWs(deleteDirs: true, disableDeferredWipeout: true)
                    powershell '''
                        Write-Host "Starting source stage..."
                        dir
                    '''
                    checkout([
                        $class: 'GitSCM',
                        branches: [[name: '*/main']],
                        userRemoteConfigs: [[
                            url: 'http://185.100.212.76:7776/Dwinzo-Beta/Dwinzo_dev.git',
                            credentialsId: env.GIT_CREDENTIALS
                        ]]
                    ])
                    powershell '''
                        Write-Host "Source checkout completed successfully"
                        dir
                    '''
                }
            }
        }

        stage('Build') {
            steps {
                script {
                    powershell '''
                        Write-Host "Cleaning existing Docker resources..."
                        $containerExists = docker ps -a -q -f name="$env:MAIN_CONTAINER"
                        if ($containerExists) {
                            Write-Host "Stopping and removing existing container: $env:MAIN_CONTAINER"
                            docker stop $env:MAIN_CONTAINER
                            docker rm $env:MAIN_CONTAINER
                        } else {
                            Write-Host "Container $env:MAIN_CONTAINER not found, skipping stop and remove."
                        }
                        docker ps -a
                        dir
                    '''
                    powershell '''
                        Write-Host "Starting Docker Compose build..."
                        $env:COMPOSE_CONVERT_WINDOWS_PATHS=1
                        docker-compose build --no-cache
                        docker images
                        dir
                    '''
                }
            }
        }

        stage('SonarQube Analysis') {
            steps {
                script {
                    powershell '''
                        Write-Host "Generating sonar-project.properties..."
                        $sonarProps = @"
sonar.projectKey=Dwinzo_Beta_Project_001
sonar.projectName=Dwinzo_Beta_Project
sonar.projectVersion=1.0.0
sonar.projectDescription=This is a sample project for Dwinzo Beta.
sonar.sources=./app/
sonar.language=js
sonar.javascript.lcov.reportPaths=coverage/lcov.info
"@
                        Set-Content -Path "sonar-project.properties" -Value $sonarProps
                        Write-Host "Running SonarScanner..."
                        sonar-scanner
                    '''
                }
            }
        }

        stage('Software Composition Analysis (SCA)') {
            steps {
                script {
                    powershell '''
                        Write-Host "Installing OWASP Dependency-Check..."
                        if (-not (Test-Path ".\\dependency-check")) {
                            Write-Host "Downloading OWASP Dependency-Check..."
                            Invoke-WebRequest -Uri "https://github.com/jeremylong/DependencyCheck/releases/download/v8.2.1/dependency-check-8.2.1-release.zip" -OutFile "dependency-check.zip"
                            Expand-Archive -Path "dependency-check.zip" -DestinationPath "." -Force
                            Remove-Item -Path "dependency-check.zip"
                        }
                        .\\dependency-check\\bin\\dependency-check.bat `
                            --project "Dwinzo-Beta-SCA" `
                            --scan "./app" `
                            --format "HTML" `
                            --out "./sca-report"
                        Write-Host "SCA report generated at ./sca-report/dependency-check-report.html"
                    '''
                }
            }
        }

        stage('Deploy') {
            steps {
                script {
                    powershell '''
                        Write-Host "Starting deployment with Docker Compose..."
                        $env:COMPOSE_CONVERT_WINDOWS_PATHS=1
                        docker compose up -d
                        Start-Sleep -Seconds 10
                        $mainContainer = docker ps -q -f name="$env:MAIN_CONTAINER"
                        if (-not $mainContainer) {
                            Write-Error "Main application container ($env:MAIN_CONTAINER) not found"
                            exit 1
                        }
                        Write-Host "Application deployed successfully!"
                        docker logs $mainContainer
                        docker ps
                        dir
                    '''
                }
            }
        }
    }

    post {
        always {
            emailext(
                subject: "Dwinzo Beta's [ Sonar & SCA ] Build ${env.JOB_NAME} - ${currentBuild.result}",
                body: """
                    <p>The SCA and Sonar scans for build <strong>${env.BUILD_NUMBER}</strong> have completed.</p>
                    <p><strong>Key Findings:</strong></p>
                    <ul>
                        <li>Dependencies Scanned: 3</li>
                        <li>Vulnerable Dependencies: 0</li>
                        <li>Vulnerabilities Found: 0</li>
                    </ul>
                    <p><strong>Full SCA Report:</strong> <a href="${env.BUILD_URL}/artifact/sca-report/dependency-check-report.html">${env.BUILD_URL}/artifact/sca-report/dependency-check-report.html</a></p>
                    <p><strong>Full Sonar Report:</strong> <a href="http://185.100.212.76:12345/">http://185.100.212.76:12345/</a></p>
                    <p><strong>Sonar Credentials:</strong> (User Name: admin, Password: R@mkumar.p.1) <em>(only for Reviewing purpose)</em></p>
                    <p>Regards,<br/>DevOps & QA Team</p>
                """,
                to: "rithish@hexrfactory.com, ramkumar@hexrfactory.com, marikannan@hexrfactory.com, vishnu@hexrfactory.com, varatharajan@hexrfactory.com, jerald@hexrfactory.com",
                attachLog: true,
                attachmentsPattern: "sca-report/dependency-check-report.html",
                mimeType: 'text/html',
                replyTo: '$SMTP_CREDENTIALS_USR',
                from: '$SMTP_CREDENTIALS_USR'
            )
            archiveArtifacts artifacts: 'sca-report/dependency-check-report.html', allowEmptyArchive: true
            cleanWs(deleteDirs: true, disableDeferredWipeout: true)
        }
        success {
            powershell '''
                Write-Host "Pipeline completed successfully!"
                Write-Host "Build Number: $env:BUILD_NUMBER"
                Write-Host "Workspace: $env:WORKSPACE"
                Write-Host "Triggered by commit: $env:commit"
                Write-Host "Author: $env:author"
            '''
        }
        failure {
            powershell '''
                Write-Host "Pipeline failed!"
                Write-Host "Please check the logs for details"
                Write-Host "Triggered by commit: $env:commit"
                Write-Host "Author: $env:author"
                docker ps -a
            '''
        }
    }
}